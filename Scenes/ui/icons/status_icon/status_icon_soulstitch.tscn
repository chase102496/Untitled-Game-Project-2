[gd_scene load_steps=15 format=3 uid="uid://b2kyn65lyuo5x"]

[ext_resource type="PackedScene" uid="uid://c7bykxg4g7d81" path="res://Scenes/ui/icons/base_icon/icon_heart.tscn" id="1_pdcl3"]
[ext_resource type="Texture2D" uid="uid://db07b4pw3dj13" path="res://Art/ui/Icons/Isle of Lore 2 Status Icons/Sources/output/status_icons.standard_transparent/status_icon_restrained_58.png" id="2_8r8iw"]
[ext_resource type="Script" path="res://Logic/misc/animation_player_autoplay.gd" id="2_lnbts"]
[ext_resource type="Shader" uid="uid://u4uqvacj1tmv" path="res://Resources/Shader/recolor_canvas_item.tres" id="2_pyc51"]

[sub_resource type="Shader" id="Shader_rdjo5"]
code = "shader_type canvas_item;

// Uniforms
uniform vec3 replacement_color : source_color = vec3(1,1,1); 
uniform float grayscale_factor : hint_range(0.0, 1.0) = 1; // 0 = no grayscale, 1 = full grayscale
uniform float recolor_factor : hint_range(0.0, 2.0) = 1; // 0 = original color, 1 = midpoint, 2 = full recolor
uniform float luminosity_factor : hint_range(0.0, 2.0) = 1; // 1 = default brightness, <1 = darker, >1 = brighter
uniform sampler2D gradient_texture; // A gradient texture for dynamic mapping
uniform bool use_gradient; // Whether to use gradient mapping (true = gradient, false = replacement_color)

void fragment() {
    // Sample the texture color
    vec4 tex_color = texture(TEXTURE, UV);

    // Calculate grayscale intensity (perceptual)
    float grayscale = 0.299 * tex_color.r + 0.587 * tex_color.g + 0.114 * tex_color.b;

    // Blend the original color with its grayscale version based on grayscale_factor
    vec3 grayscaled_color = mix(tex_color.rgb, vec3(grayscale), grayscale_factor);

    // Decide whether to use gradient or replacement_color for recoloring
    vec3 color_choice;
    if (use_gradient) {
        // Use the gradient texture to map the grayscale value
        color_choice = texture(gradient_texture, vec2(grayscale, 0.5)).rgb;
    } else {
        // Directly use the replacement color
        color_choice = replacement_color;
    }

    // Remap recolor_factor from [0.0, 2.0] to [0.0, 1.0] for blending
    float recolor_ratio = clamp(recolor_factor * 0.5, 0.0, 1.0);

    // Replace the grayscaled color proportionally with the recolored version
    vec3 recolored = grayscaled_color * (1.0 - recolor_ratio) + color_choice * recolor_ratio;

    // Adjust the brightness of the final color using luminosity_factor
    vec3 final_color = recolored * luminosity_factor;

    // Preserve transparency
    COLOR = vec4(final_color, tex_color.a);
}
"

[sub_resource type="Gradient" id="Gradient_h8iw8"]
offsets = PackedFloat32Array(0, 0.299363, 1)
colors = PackedColorArray(0.17, 0.0927633, 0.0901, 1, 0.905882, 0.498039, 0.482353, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_ekts3"]
gradient = SubResource("Gradient_h8iw8")
width = 16

[sub_resource type="ShaderMaterial" id="ShaderMaterial_slm6k"]
resource_local_to_scene = true
shader = SubResource("Shader_rdjo5")
shader_parameter/replacement_color = Color(1, 1, 1, 1)
shader_parameter/grayscale_factor = 1.0
shader_parameter/recolor_factor = 2.0
shader_parameter/luminosity_factor = 1.0
shader_parameter/use_gradient = true
shader_parameter/gradient_texture = SubResource("GradientTexture1D_ekts3")

[sub_resource type="Gradient" id="Gradient_tg5x5"]
offsets = PackedFloat32Array(0.044586, 0.592357, 1)
colors = PackedColorArray(0.51, 0.27829, 0.2703, 1, 0.905882, 0.498039, 0.482353, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_1vbss"]
gradient = SubResource("Gradient_tg5x5")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_w1o7u"]
shader = ExtResource("2_pyc51")
shader_parameter/replacement_color = Color(1, 1, 1, 1)
shader_parameter/grayscale_factor = 1.0
shader_parameter/recolor_factor = 1.0
shader_parameter/luminosity_factor = 1.0
shader_parameter/use_gradient = true
shader_parameter/gradient_texture = SubResource("GradientTexture1D_1vbss")

[sub_resource type="Animation" id="Animation_ybdww"]
length = 0.001
loop_mode = 2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("..:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(1, 1)]
}

[sub_resource type="Animation" id="Animation_jfvho"]
resource_name = "new_animation"
length = 0.2
loop_mode = 2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("..:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(4, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(1.1, 1.1)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_f0afr"]
_data = {
"RESET": SubResource("Animation_ybdww"),
"new_animation": SubResource("Animation_jfvho")
}

[node name="TextureRect" type="TextureRect"]
self_modulate = Color(1, 1, 1, 0)
anchors_preset = -1
anchor_right = 0.052
anchor_bottom = 0.093
offset_right = 0.159996
offset_bottom = -0.440002
pivot_offset = Vector2(50, 50)
size_flags_horizontal = 3
size_flags_vertical = 3
expand_mode = 1

[node name="icon_heart" parent="." instance=ExtResource("1_pdcl3")]
material = SubResource("ShaderMaterial_slm6k")
layout_mode = 1
anchors_preset = 15
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 0.0
offset_top = 0.0
offset_right = 0.0
offset_bottom = 0.0
expand_mode = 1

[node name="TextureRect2" type="TextureRect" parent="."]
texture_filter = 6
material = SubResource("ShaderMaterial_w1o7u")
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 22.0
offset_top = 5.0
offset_right = -3.0
offset_bottom = -8.0
grow_horizontal = 2
grow_vertical = 2
size_flags_vertical = 8
texture = ExtResource("2_8r8iw")
expand_mode = 1
flip_h = true
flip_v = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("../icon_heart")
libraries = {
"": SubResource("AnimationLibrary_f0afr")
}
script = ExtResource("2_lnbts")
autoplay_animation = "new_animation"
